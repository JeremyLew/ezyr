% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/formatting.R
\name{tabulate_glm_result}
\alias{tabulate_glm_result}
\title{Tabulate GLM result}
\usage{
tabulate_glm_result(model, conf_lvl = 0.95, exponentiate = FALSE, num_dp = 2)
}
\arguments{
\item{model}{(glm object) A \link[stats:glm]{stats::glm} model object}

\item{conf_lvl}{(numeric) Confidence level. The default value of 0.95 for 95\% confidence level.

By default, summary.glm function in R computes p-values using the Wald method.
To be consistent, we compute confidence intervals using the Wald method via \link[stats:confint]{stats::confint.default}.
See discussion in this \href{https://stats.stackexchange.com/questions/144603/why-do-my-p-values-differ-between-logistic-regression-output-chi-squared-test}{post}}

\item{exponentiate}{(logical) TRUE if beta-coefficients are to be exponentiated and expressed as odds ratios.
If TRUE, confidence intervals will also be exponentiated correspondingly}

\item{num_dp}{(numeric) Number of decimal places to present beta coefficients/odds ratios and confidence intervals}
}
\value{
(data.frame) Table of your GLM results
}
\description{
\code{tabulate_glm_result} tabulates your GLM results for presentation
in an Rmarkdown document.
}
\examples{
library(dplyr)
if (require("mlbench") & require("forcats")) {
  data(BostonHousing2, package = "mlbench")

  glm(medv ~ crim + town + rm + age + dis,
    data = BostonHousing2 \%>\%
      filter(town \%in\% c(
        "Newton", "Boston South Boston", "Boston Roxbury",
        "Somerville", "Boston Savin Hill", "Cambridge"
      )) \%>\%
      dplyr::mutate_at("town", forcats::fct_drop),
    family = gaussian(link = "identity")
  ) \%>\%
    tabulate_glm_result()
}

}
